{
    "collision": "using Unity.Entities;\nusing Unity.Burst;\nusing Unity.Collections;\nusing Unity.Mathematics;\nusing Unity.Transforms;\nusing ECS;\nusing UnityEngine;\nusing System;\nusing Random = Unity.Mathematics.Random;\nusing Unity.VisualScripting.FullSerializer;\n\n[BurstCompile]\n\npublic partial struct EntitySystem : ISystem\n{\n    [BurstCompile]\n    public void OnUpdate(ref SystemState state)\n    {\n        Random random = new Random((uint)UnityEngine.Random.Range(1, 100000));\n        EntityManager entityManager = state.EntityManager;\n\n        NativeArray<Entity> entities = entityManager.GetAllEntities(Allocator.Temp);\n\n        foreach (Entity entity in entities)\n        {\n            if (entityManager.HasComponent<EntityComponent>(entity))\n            {\n                EntityComponent entityRef = entityManager.GetComponentData<EntityComponent>(entity);\n                LocalTransform localTransform = entityManager.GetComponentData<LocalTransform>(entity);\n\n                float3 moveDirection = localTransform.Forward() * SystemAPI.Time.DeltaTime * entityRef.moveSpeed;\n\n                Quaternion rotation = Quaternion.Euler(0, entityRef.rotationAngle * entityRef.directionValue * SystemAPI.Time.DeltaTime, 0);\n                localTransform.Rotation = localTransform.Rotation * rotation;\n\n                localTransform.Position += moveDirection * 0.1f;\n\n                double sineWaveOffset = math.sin(SystemAPI.Time.ElapsedTime * 20) * (0.001f + (entityRef.moveSpeed * 0.0005));\n\n                localTransform.Position.y += (float)sineWaveOffset;\n\n                entityManager.SetComponentData(entity, localTransform);\n\n            }\n\n            if (entityManager.HasComponent<ScaleEffect>(entity))\n            {\n                ScaleEffect scaleEffect = entityManager.GetComponentData<ScaleEffect>(entity);\n                if (scaleEffect.timeElapsed < scaleEffect.duration)\n                {\n                    float progress = scaleEffect.timeElapsed / scaleEffect.duration;\n                    float currentScale = math.lerp(scaleEffect.startScale, scaleEffect.endScale, progress);\n\n                    LocalTransform scale = entityManager.GetComponentData<LocalTransform>(entity);\n                    scale.Scale = currentScale;\n\n                    entityManager.SetComponentData(entity, scale);\n\n                    scaleEffect.timeElapsed += SystemAPI.Time.DeltaTime;\n                    entityManager.SetComponentData(entity, scaleEffect);\n                }\n            }\n        }\n\n        entities.Dispose();\n    }\n}",
    "movement": "using Unity.Collections;\nusing Unity.Entities;\nusing Unity.Mathematics;\nusing Unity.Physics;\nusing Unity.Transforms;\n\npublic partial struct TriggerSystem : ISystem\n{\n    private void OnUpdate(ref SystemState state)\n    {\n        EntityManager entityManager = state.EntityManager;\n\n        NativeArray<Entity> entities = entityManager.GetAllEntities(Allocator.Temp);\n\n        var deltaTime = SystemAPI.Time.DeltaTime;\n        var entitiesWithGoouseTouched = entityManager.GetAllEntities(Allocator.Temp);\n\n        foreach (var e in entitiesWithGoouseTouched)\n        {\n            if (entityManager.HasComponent<GoouseTouched>(e))\n            {\n                var component = entityManager.GetComponentData<GoouseTouched>(e);\n                component.removeTimer -= deltaTime;\n\n                if (component.removeTimer <= 0)\n                {\n                    //Time to remove the component\n                    entityManager.RemoveComponent<GoouseTouched>(e);\n                }\n                else\n                {\n                    //Update the component data if it's not time to remove\n                    entityManager.SetComponentData(e, component);\n                }\n            }\n        }\n\n        foreach (Entity entity in entities)\n        {\n            if (entityManager.HasComponent<TriggerComponent>(entity))\n            {\n                RefRW<LocalTransform> triggerTransform = SystemAPI.GetComponentRW<LocalTransform>(entity);\n                RefRO<TriggerComponent> triggerComponent = SystemAPI.GetComponentRO<TriggerComponent>(entity);\n\n                float size = triggerComponent.ValueRO.size;\n\n                triggerTransform.ValueRW.Value.c0 = new Unity.Mathematics.float4(size, 0, 0, 0);\n                triggerTransform.ValueRW.Value.c1 = new Unity.Mathematics.float4(0, size, 0, 0);\n                triggerTransform.ValueRW.Value.c2 = new Unity.Mathematics.float4(0, 0, size, 0);\n\n                PhysicsWorldSingleton physicsWorld = SystemAPI.GetSingleton<PhysicsWorldSingleton>();\n\n                NativeList<ColliderCastHit> hits = new NativeList<ColliderCastHit>(Allocator.Temp);\n\n                physicsWorld.SphereCastAll(triggerTransform.ValueRO.Position, triggerComponent.ValueRO.size / 2,\n                    float3.zero, 1, ref hits, CollisionFilter.Default);\n\n                foreach(ColliderCastHit hit in hits)\n                {\n                    if (!entityManager.HasComponent<GoouseTouched>(hit.Entity))\n                    {\n                        entityManager.AddComponent<GoouseTouched>(hit.Entity);\n\n                        var gouseTouched = new GoouseTouched\n                        {\n                            originalScale = 1f,\n                            endScale = 1.1f,\n                            duration = 0.1f,\n                            time = 0f,\n                            removeTimer = 0.38f,\n                            scalingUp = false,\n                        };\n\n                        entityManager.SetComponentData(hit.Entity, gouseTouched);\n                    }\n                }\n\n                hits.Dispose();\n            }\n        }\n\n        entities.Dispose();\n    }\n}",
    "input": "using System.Collections;\nusing System.Collections.Generic;\nusing Unity.Entities;\nusing UnityEngine;\n\npublic partial class InputSystem : SystemBase\n{\n    public Controls controls;\n    protected override void OnCreate()\n    {\n        if(!SystemAPI.TryGetSingleton(out InputComponent input))\n        {\n            EntityManager.CreateEntity(typeof(InputComponent));\n        }\n\n        controls = new Controls();\n        controls.Enable();\n    }\n\n    protected override void OnUpdate()\n    {\n        Vector2 mousePos = controls.ActionMap.MousePosition.ReadValue();\n\n        SystemAPI.SetSingleton(new InputComponent\n        {\n            mousePos = mousePos\n        });\n    }\n}\n"
}
